1) Functional Requirements(~ 5 Minutes)
Functional requirements are your "Users/Clients should be able to..." statements.
These are the core features of your system and should be the first thing you discuss with your interviewer.
   a)Functional requirements are your "Users/Clients should be able to..." statements.

2) Non-functional Requirements
Non-functional requirements are statements about the system qualities that are important to your users.
    a)These can be phrased as "The system should be able to..." or "The system should be..."

Coming up with non-functional requirements can be challenging, especially if you're not familiar with the domain.
Here is a checklist of things to consider that might help you identify the most important non-functional requirements for your system.
You'll want to identify the top 3-5 that are most relevant to your system.
CAP Theorem: Should your system prioritize consistency or availability? Note, partition tolerance is a given in distributed systems.
Environment Constraints: Are there any constraints on the environment in which your system will run?
 For example, are you running on a mobile device with limited battery life?
Running on devices with limited memory or limited bandwidth (e.g. streaming video on 3G)?
Scalability: All systems need to scale, but does this system have unique scaling requirements? For example, does it have bursty traffic at a specific time of day? Are there events, like holidays, that will cause a significant increase in traffic?
 Also consider the read vs write ratio here. Does your system need to scale reads or writes more?
Latency: How quickly does the system need to respond to user requests?
Specifically consider any requests that require meaningful computation.
For example, low latency search when designing Yelp.
Durability: How important is it that the data in your system is not lost? For example, a social network might be able to tolerate some data loss, but a banking system cannot.
Security: How secure does the system need to be? Consider data protection, access control, and compliance with regulations.
Fault Tolerance: How well does the system need to handle failures? Consider redundancy, failover, and recovery mechanisms.
Compliance: Are there legal or regulatory requirements the system needs to meet? Consider industry standards, data protection laws, and other regulations.


here are only two hard problems in

3:Estimation and size calculation(~2 minutes)


4:API or System Interface (~5 minutes)

RESTful API: The standard communication constraints of the internet. Uses HTTP verbs (GET, POST, PUT, DELETE) to perform CRUD operations on resources.
GraphQL API: A newer communication protocol that allows clients to specify exactly what data they want to receive from the server.
Wire Protocol: If you're communicating over websockets or raw TCP sockets, you'll want to define the wire protocol. This is the format of the data that will be sent over the network, usually in the format of messages.


Notice how there is no userId in the POST /v1/tweet endpoint? This is because we will get the id of the user initiating the request from the authentication token in the request header. Putting sensitive information like user ids in the request body is a security risk and a mistake that many candidates make. Don't be one of them!

5:[Optional] Data Flow (~5 minutes)

6:High Level Design (~10-15 minutes)


7:Deep Dives (~10 minutes)



